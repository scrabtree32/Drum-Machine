const drumBank =[{
  keyCode: 81,
  keyTrigger: 'Q',
  id: 'Snare',
  url: 'http://cdn.mos.musicradar.com/audio/samples/drum-demo-samples/CYCdh_K4-Snr05.mp3'
}, {
  keyCode: 87,
  keyTrigger: 'W',
  id: 'Bass Drum',
  url: 'http://cdn.mos.musicradar.com/audio/samples/drum-demo-samples/CYCdh_ElecK01-Kick02.mp3'
},{
  keyCode: 69,
  keyTrigger: 'E',
  id: 'Cymbal',
  url: 'http://cdn.mos.musicradar.com/audio/samples/drum-demo-samples/CYCdh_Crash-03.mp3'
},{
  keyCode: 65,
  keyTrigger: 'A',
  id: 'Tom-Toms',
  url: 'http://dight310.byu.edu/media/audio/FreeLoops.com/1/1/909%20Low%20Tom-21882-Free-Loops.com.mp3'
},{
  keyCode: 83,
  keyTrigger: 'S',
  id: 'Cowbell',
  url: 'http://dight310.byu.edu/media/audio/FreeLoops.com/2/2/Cowbell%20One%20Shot.wav-18618-Free-Loops.com.mp3'
},{
  keyCode: 68,
  keyTrigger: 'D',
  id: 'Tambourine',
  url: 'http://dight310.byu.edu/media/audio/FreeLoops.com/5/5/Native%20American-6093-Free-Loops.com.mp3'
},{
  keyCode: 90,
  keyTrigger: 'Z',
  id: 'Chimes',
  url: 'http://www.gravomaster.com/alarm/sounds/chime-high.mp3'
},{
  keyCode: 88,
  keyTrigger: 'X',
  id: 'Timpani',
  url: 'http://s1download-universal-soundbank.com/mp3/sounds/19452.mp3'
}, {
  keyCode: 67,
  keyTrigger: 'C',
  id: 'Triangle',
  url: 'http://s1download-universal-soundbank.com/mp3/sounds/21226.mp3'
}];

const chordBank =[{
  keyCode: 81,
  keyTrigger: 'Q',
  id: 'Aluminum',
  url: 'https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/various%20weird%20hits/215[kb]aluminum-reflector-bell.wav.mp3'
}, {
  keyCode: 87,
  keyTrigger: 'W',
  id: 'Analog Delay Hit',
  url: 'https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/various%20weird%20hits/301[kb]analogdelayhit.aif.mp3'
},{
  keyCode: 69,
  keyTrigger: 'E',
  id: 'Bubble',
  url: 'https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/various%20weird%20hits/40[kb]analogue_bubble.aif.mp3'
},{
  keyCode: 65,
  keyTrigger: 'A',
  id: 'Barkingtom',
  url: 'https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/various%20weird%20hits/8[kb]barkingtom.aif.mp3'
},{
  keyCode: 83,
  keyTrigger: 'S',
  id: 'Bip',
  url: 'https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/various%20weird%20hits/11[kb]bip.wav.mp3'
},{
  keyCode: 68,
  keyTrigger: 'D',
  id: 'Biting Celery',
  url: 'https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/various%20weird%20hits/23[kb]biting-celery.aif.mp3'
},{
  keyCode: 90,
  keyTrigger: 'Z',
  id: 'Bottle Breath',
  url: 'https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/various%20weird%20hits/13[kb]bottlebreath.aif.mp3'
},{
  keyCode: 88,
  keyTrigger: 'X',
  id: 'Clonk',
  url: 'https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/various%20weird%20hits/53[kb]clonk.aif.mp3'
}, {
  keyCode: 67,
  keyTrigger: 'C',
  id: 'Gronk',
  url: 'https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/various%20weird%20hits/59[kb]gronk.aif.mp3'
}];

class EachButton extends React.Component {
  constructor(props) {
    super(props);
    this.handleKeyPress = this.handleKeyPress.bind(this); 
    this.handleClick = this.handleClick.bind(this);
    this.playSound = this.playSound.bind(this);
  }
  componentDidMount() {
    document.addEventListener("keydown", this.handleKeyPress);
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.handleKeyPress);
  }
  handleClick() {
    this.props.updateDisplay(this.props.id);
    this.playSound();
  }
  handleKeyPress(e) {
    var code = e.keyCode || e.which;
    if (code === this.props.keyCode) {
      var drumId = this.props.bank.filter(x => x.keyCode === code)
      this.props.updateDisplay(drumId[0].id);
      this.playSound();
    }
  }
  playSound(e) {
    const sound = document.getElementById(this.props.keyTrigger);
    sound.currentTime = 0;
    sound.volume = this.props.volLevel;
    if(this.props.power) {
      sound.play();
    }
  }
  render() {
    return(
      <div className='drum-pad' 
        id={this.props.id}
        onKeyDown={this.handleKeyPress} 
        onClick={this.handleClick}
        bank={this.props.bank}>
        <audio 
          className='clip' 
          id={this.props.keyTrigger} 
          src={this.props.clip}></audio>
        {this.props.keyTrigger}
      </div>
    );
  }
}

class AllButtons extends React.Component {
  constructor(props) {
    super(props);
  }
 
  render() {
    let padBank;
    padBank = this.props.bank.map(i => {
      return (
        <EachButton 
          id={i.id}
          keyCode={i.keyCode}
          keyTrigger={i.keyTrigger}
          clip={i.url}
          bank={this.props.bank}
          updateDisplay={this.props.updateDisplay}
          playSound={this.props.playSound}
          volLevel={this.props.volLevel}
          power={this.props.power}/>
      );
    });
    return(
      <div id='drum-container'>
        {padBank}
      </div>
    );
  }
}


class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      display: '',
      power: true,
      volLevel: 0.5,
      bank: drumBank
    }
    this.updateDisplay = this.updateDisplay.bind(this);
    this.adjustVolume = this.adjustVolume.bind(this);
    this.powerToggle = this.powerToggle.bind(this);
    this.bankToggle = this.bankToggle.bind(this);
  }

  updateDisplay(id) {
    this.setState({
      display: this.state.power ? id : ''
    });  
  }

  adjustVolume(e) {
    var slider = document.getElementById("volRange");
    this.setState({
      volLevel: slider.value/100
    });
  }
  powerToggle() { 
    this.setState({
      display: '',
      power: !this.state.power
    });   
  }
  bankToggle() { 
    this.setState({
      display: '',
      bank: this.state.bank == drumBank ? chordBank : drumBank
    });   
  }
  render() {
    return(
      <div id='drum-machine'>
        <AllButtons 
          updateDisplay={this.updateDisplay} 
          playSound={this.playSound} 
          bank={this.state.bank} 
          volLevel={this.state.volLevel}
          power={this.state.power}/>
        <div id='controls'>
        <div id='power'>
          <div id='text'>Power</div>
          <div id="switch" onChange={this.powerToggle}>  
            <label>
              <input type="checkbox"/>
              <span id="slider"></span>
            </label>
          </div>      
      
          <div id='text'>Bank</div>
          <div id="switch" onChange={this.bankToggle}>  
            <label>
              <input type="checkbox"/>
              <span id="slider"></span>
            </label>
          </div> 
        </div>
        <div id='display'>
          <p>{this.state.display}</p>
        </div> 
          
        <div className="slide-container">
          <input type="range" min="1" max="100" className="slider" id="volRange" onChange={this.adjustVolume}/>
          </div>
        </div>
      </div>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('app'));